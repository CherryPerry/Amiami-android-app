buildscript {
    ext {
        kotlinVersion = '1.2.71'
        detektVersion = '1.0.0.RC9.2'
    }

    repositories {
        google()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
        classpath 'com.google.gms:google-services:4.1.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'gradle.plugin.org.jmailen.gradle:kotlinter-gradle:1.15.1'
        classpath 'gradle.plugin.com.cherryperry.gfe:gradle-file-encrypt:1.2.0'
        classpath "gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektVersion"
        classpath 'io.fabric.tools:gradle:1.26.1'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }

    ext {
        compatVersion = '28.0.0'
        retoriftVersion = '2.4.0'
        okhttpVersion = '3.11.0'
        daggerVersion = '2.17'
        junitVersion = '4.12'
        rxVersion = '2.2.1'
        firebaseCoreVersion = '16.0.3'
        firebaseMessagingVersion = '17.3.2'
        robolectricVersion = '3.8'
        compileSdkVersion = 28
        targetSdkVersion = 28
        minSdkVersion = 14
        kotlinVersion = kotlinVersion
    }
}

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.cherryperry.gradle-file-encrypt'

gradleFileEncrypt {
    files 'keystore.properties', 'presentation/google-services.json', 'presentation/fabric.properties'
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

subprojects {
    apply plugin: 'org.jmailen.kotlinter'
    tasks.whenTaskAdded { task ->
        if (task.name == LifecycleBasePlugin.CHECK_TASK_NAME) {
            apply plugin: 'io.gitlab.arturbosch.detekt'
            detekt {
                toolVersion = detektVersion
                config = files('detekt.yml')
                input = files('src')
                filters = 'do-not-use-it'
            }
        }
    }
}
